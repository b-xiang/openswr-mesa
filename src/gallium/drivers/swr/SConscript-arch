from sys import executable as python_cmd
import distutils.version
import os.path

Import('*')

if not env['llvm']:
    print 'warning: LLVM disabled: not building swr'
    Return()

env = env.Clone()

env.MSVC2013Compat()

env.Append(CPPDEFINES = [
	'__STDC_CONSTANT_MACROS',
	'__STDC_LIMIT_MACROS',
	])

if not env['msvc'] :
    env.Append(CCFLAGS = [
        '-std=c++11',
    ])

env.Prepend(CPPPATH = [
    'rasterizer',
    'rasterizer/core',
    'rasterizer/jitter',
    'rasterizer/scripts',
    'rasterizer/jitter',
    ])

env.CodeGenerate(
    target = 'rasterizer/scripts/gen_knobs.cpp',
    script = 'rasterizer/scripts/gen_knobs.py',
    source = [],
    command = python_cmd + ' $SCRIPT ' + Dir('rasterizer/scripts').abspath
)

env.CodeGenerate(
    target = 'rasterizer/scripts/gen_knobs.h',
    script = 'rasterizer/scripts/gen_knobs.py',
    source = [],
    command = python_cmd + ' $SCRIPT ' + Dir('rasterizer/scripts').abspath
)

env.CodeGenerate(
    target = 'rasterizer/jitter/state_llvm.h',
    script = 'rasterizer/jitter/scripts/gen_llvm_types.py',
    source = 'rasterizer/core/state.h',
    command = python_cmd + ' $SCRIPT --input $SOURCE --output $TARGET'
)

env.CodeGenerate(
    target = 'rasterizer/jitter/builder_gen.h',
    script = 'rasterizer/jitter/scripts/gen_llvm_ir_macros.py',
    source = os.path.join(env['llvm_includedir'], 'llvm/IR/IRBuilder.h'),
    command = python_cmd + ' $SCRIPT --input $SOURCE --output $TARGET --gen_h'
)

env.CodeGenerate(
    target = 'rasterizer/jitter/builder_gen.cpp',
    script = 'rasterizer/jitter/scripts/gen_llvm_ir_macros.py',
    source = os.path.join(env['llvm_includedir'], 'llvm/IR/IRBuilder.h'),
    command = python_cmd + ' $SCRIPT --input $SOURCE --output $TARGET --gen_cpp'
)

env.CodeGenerate(
    target = 'rasterizer/jitter/builder_x86.h',
    script = 'rasterizer/jitter/scripts/gen_llvm_ir_macros.py',
    source = '',
    command = python_cmd + ' $SCRIPT --output $TARGET --gen_x86_h'
)

env.CodeGenerate(
    target = 'rasterizer/jitter/builder_x86.cpp',
    script = 'rasterizer/jitter/scripts/gen_llvm_ir_macros.py',
    source = '',
    command = python_cmd + ' $SCRIPT --output $TARGET --gen_x86_cpp'
)

source = [
       'rasterizer/scripts/gen_knobs.cpp', 'rasterizer/scripts/gen_knobs.h',
       'rasterizer/jitter/builder_gen.cpp', 'rasterizer/jitter/builder_gen.h',
       'rasterizer/jitter/builder_x86.cpp', 'rasterizer/jitter/builder_x86.h',
       ]

source += env.ParseSourceList('../Makefile.sources-arch', [
    'CXX_SOURCES',
    'COMMON_CXX_SOURCES',
    'CORE_CXX_SOURCES',
    'JITTER_CXX_SOURCES',
    'MEMORY_CXX_SOURCES'
])

# remove headers, as scons thinks they are static objects for the .so
source = [x for x in source if not x.endswith(tuple(['.h','.hpp']))]

env.Prepend(LIBS = [ mesautil, mesa, gallium ])

Import('swr_arch')

if swr_arch == 'avx':
    env.Append(CPPDEFINES = ['KNOB_ARCH=KNOB_ARCH_AVX'])
    env.Append(CCFLAGS = ['-march=core-avx-i'])
    swrAVX = env.SharedLibrary(target = 'swrAVX',	source = source)
    env.Alias('swrAVX', swrAVX)
    Export('swrAVX')
elif swr_arch == 'avx2':
    env.Append(CPPDEFINES = ['KNOB_ARCH=KNOB_ARCH_AVX2'])
    env.Append(CCFLAGS = ['-march=core-avx2'])
    swrAVX2 = env.SharedLibrary(target = 'swrAVX2',	source = source)
    env.Alias('swrAVX2', swrAVX2)
    Export('swrAVX2')
else:
    print "unknown swr architecture"
    exit(1)
